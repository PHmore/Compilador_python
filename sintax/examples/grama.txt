


    'S': [['PROGRAMA']],

PROGRAMA → SEÇÃOFUNÇÕES PRINCIPAL
SEÇÃOFUNÇÕES → LISTAFUNÇÕES | ε
LISTAFUNÇÕES → DECFUNÇÃO | LISTAFUNÇÕES DECFUNÇÃO
DECFUNÇÃO → TIPORETORNO id ( PARÂMETROS ) BLOCO
TIPORETORNO → TIPO | void
TIPO → TIPOBASE DIMENSÃO
TIPOBASE → char | float | int | boolean
DIMENSÃO → DIMENSÃO [ num_int ] | ε
PARÂMETROS → LISTAPARÂMETROS | ε
LISTAPARÂMETROS → TIPO id | LISTAPARÂMETROS , TIPO id
PRINCIPAL → main ( ) BLOCO
BLOCO → { SEÇÃOVARIAVEIS SEÇÃOCOMANDOS }
SEÇÃOVARIAVEIS → LISTAVARIAVEIS | ε
LISTAVARIAVEIS → TIPO LISTAID ; | LISTAVARIAVEIS TIPO LISTAID ;
LISTAID → identificador | LISTAID , identificador
SEÇÃOCOMANDOS → LISTACOMANDOS | ε
LISTACOMANDOS → COMANDO | LISTACOMANDOS COMANDO
COMANDO → LEITURA | ESCRITA | ATRIBUIÇÃO | FUNÇÃO | SELEÇÃO | ENQUANTO |
RETORNO
LEITURA → scanf ( LISTATERMOLEITURA ) ;
LISTATERMOLEITURA → TERMOLEITURA| LISTATERMOLEITURA , TERMOLEITURA
TERMOLEITURA → id DIMENSAO2
DIMENSAO2 → DIMENSAO2 [ EXPR_ADITIVA ] | ε
ESCRITA → println ( LISTATERMOESCRITA ) ;
LISTATERMOESCRITA → TERMOESCRITA | LISTATERMOESCRITA , TERMOESCRITA
TERMOESCRITA → id DIMENSAO2 | CONSTANTE | texto
SELEÇÃO → if ( EXPRESSÃO ) BLOCO SENÃO
SENÃO → else BLOCO | ε
ENQUANTO → while ( EXPRESSÃO ) BLOCO
ATRIBUIÇÃO → id = COMPLEMENTO ;
COMPLEMENTO → EXPRESSÃO | FUNÇÃO
FUNÇÃO → func id ( ARGUMENTOS )
ARGUMENTOS → LISTAARGUMENTOS | ε

LISTAARGUMENTOS → EXPRESSÃO | LISTAARGUMENTOS , EXPRESSÃO
RETORNO → return EXPRESSÃO ;
EXPRESSÃO → EXPR_OU
EXPR_OU → EXPR_E | EXPR_OU || EXPR_E
EXPR_E → EXPR_RELACIONAL | EXPR_E && EXPR_RELACIONAL
EXPR_RELACIONAL → EXPR_ADITIVA | EXPR_ADITIVA opRelacional EXPR_ADITIVA
EXPR_ADITIVA → EXPR_MULTIPLICATIVA |

EXPR_ADITIVA OP_ADITIVO EXPR_MULTIPLICATIVA

OP_ADITIVO → + | -
EXPR_MULTIPLICATIVA → FATOR |

EXPR_MULTIPLICATIVA OP_MULTIPLICATIVO FATOR

OP_MULTIPLICATIVO → * | / | %
FATOR → SINAL identificador DIMENSAO2 | SINAL CONSTANTE | texto | ! FATOR
| ( EXPRESSÃO )
CONSTANTE → num_int | num_dec
SINAL → + | - | ε

Vamos separar os não terminais dos terminais para a gramática fornecida:

### Não Terminais
Os não terminais são os símbolos que podem ser expandidos em outras produções. Na gramática fornecida, os não terminais são:

- PROGRAMA
- SEÇÃOFUNÇÕES
- LISTAFUNÇÕES
- DECFUNÇÃO
- TIPORETORNO
- TIPO
- TIPOBASE
- DIMENSÃO
- PARÂMETROS
- LISTAPARÂMETROS
- PRINCIPAL
- BLOCO
- SEÇÃOVARIAVEIS
- LISTAVARIAVEIS
- LISTAID
- SEÇÃOCOMANDOS
- LISTACOMANDOS
- COMANDO
- LEITURA
- LISTATERMOLEITURA
- TERMOLEITURA
- DIMENSAO2
- ESCRITA
- LISTATERMOESCRITA
- TERMOESCRITA
- SELEÇÃO
- SENÃO
- ENQUANTO
- ATRIBUIÇÃO
- COMPLEMENTO
- FUNÇÃO
- ARGUMENTOS
- LISTAARGUMENTOS
- RETORNO
- EXPRESSÃO
- EXPR_OU
- EXPR_E
- EXPR_RELACIONAL
- EXPR_ADITIVA
- OP_ADITIVO
- EXPR_MULTIPLICATIVA
- OP_MULTIPLICATIVO
- FATOR
- CONSTANTE
- SINAL


### Terminais
Os terminais são os símbolos que não podem ser expandidos em outras produções. Eles representam os tokens finais que aparecem na linguagem. Na gramática fornecida, os terminais são:

- `id`
- `num_int`
- `num_dec`
- `char`
- `float`
- `int`
- `boolean`
- `void`
- `main`
- `{`
- `}`
- `(`
- `)`
- `[`
- `]`
- `;`
- `,`
- `=`
- `+`
- `-`
- `*`
- `/`
- `%`
- `!`
- `return`
- `func`
- `scanf`
- `println`
- `if`
- `else`
- `while`
- `||`
- `&&`
- `opRelacional` (um terminal genérico para operadores relacionais)
- `CONSTANTE`
- `texto`
- `$` (símbolo de fim de entrada)
- `ε` (representa a produção vazia)

Com estas listas, você pode distinguir claramente entre os símbolos terminais e não terminais na gramática.

# A analise será feita de forma as descendentes pois são na teoria mais simples de se implementar doq os ascendentes

# Para fazermos um analisador sintático é necessário utilizar regras de produção

# Devemos separar em grupos como Cabeça, Final, First e Follow
# Cabeça é o primeiro caracter a direita da linha de produção sendo terminal ou não terminal
# Final é o último caracter a direta da linha de produção sendo terminal ou não terminal
# First é o primeiro caracter a direta da linha de produção sendo terminal caso seja vazio é feito uma união com o first do próximo não teminal

# sendo A um não terminal o Follow é o conjunto de terminais que aparecem a frente imediatamente a frente do mesmo, 
# caso haja (vazio) é folloW de A é toda a linha de produção que A está inserido

'Productions' : {
        1: {'left': 'PROGRAMA', 'right': ['SEÇÃOFUNÇÕES', 'PRINCIPAL']},
        2: {'left': 'SEÇÃOFUNÇÕES', 'right': ['LISTAFUNÇÕES']},
        3: {'left': 'SEÇÃOFUNÇÕES', 'right': ['ε']},
        4: {'left': 'LISTAFUNÇÕES', 'right': ['DECFUNÇÃO']},
        5: {'left': 'LISTAFUNÇÕES', 'right': ['LISTAFUNÇÕES', 'DECFUNÇÃO']},
        6: {'left': 'DECFUNÇÃO', 'right': ['TIPORETORNO', 'id', '(', 'PARÂMETROS', ')', 'BLOCO']},
        7: {'left': 'TIPORETORNO', 'right': ['TIPO']},
        8: {'left': 'TIPORETORNO', 'right': ['void']},
        9: {'left': 'TIPO', 'right': ['TIPOBASE', 'DIMENSÃO']},
        10: {'left': 'TIPOBASE', 'right': ['char']},
        11: {'left': 'TIPOBASE', 'right': ['float']},
        12: {'left': 'TIPOBASE', 'right': ['int']},
        13: {'left': 'TIPOBASE', 'right': ['boolean']},
        14: {'left': 'DIMENSÃO', 'right': ['DIMENSÃO', '[', 'num_int', ']']},
        15: {'left': 'DIMENSÃO', 'right': ['ε']},
        16: {'left': 'PARÂMETROS', 'right': ['LISTAPARÂMETROS']},
        17: {'left': 'PARÂMETROS', 'right': ['ε']},
        18: {'left': 'LISTAPARÂMETROS', 'right': ['TIPO', 'id']},
        19: {'left': 'LISTAPARÂMETROS', 'right': ['LISTAPARÂMETROS', ',', 'TIPO', 'id']},
        20: {'left': 'PRINCIPAL', 'right': ['main', '(', ')', 'BLOCO']},
        21: {'left': 'BLOCO', 'right': ['{', 'SEÇÃOVARIAVEIS', 'SEÇÃOCOMANDOS', '}']},
        22: {'left': 'SEÇÃOVARIAVEIS', 'right': ['LISTAVARIAVEIS']},
        23: {'left': 'SEÇÃOVARIAVEIS', 'right': ['ε']},
        24: {'left': 'LISTAVARIAVEIS', 'right': ['TIPO', 'LISTAID', ';']},
        25: {'left': 'LISTAVARIAVEIS', 'right': ['LISTAVARIAVEIS', 'TIPO', 'LISTAID', ';']},
        26: {'left': 'LISTAID', 'right': ['identificador']},
        27: {'left': 'LISTAID', 'right': ['LISTAID', ',', 'identificador']},
        28: {'left': 'SEÇÃOCOMANDOS', 'right': ['LISTACOMANDOS']},
        29: {'left': 'SEÇÃOCOMANDOS', 'right': ['ε']},
        30: {'left': 'LISTACOMANDOS', 'right': ['COMANDO']},
        31: {'left': 'LISTACOMANDOS', 'right': ['LISTACOMANDOS', 'COMANDO']},
        32: {'left': 'COMANDO', 'right': ['LEITURA']},
        33: {'left': 'COMANDO', 'right': ['ESCRITA']},
        34: {'left': 'COMANDO', 'right': ['ATRIBUIÇÃO']},
        35: {'left': 'COMANDO', 'right': ['FUNÇÃO']},
        36: {'left': 'COMANDO', 'right': ['SELEÇÃO']},
        37: {'left': 'COMANDO', 'right': ['ENQUANTO']},
        38: {'left': 'COMANDO', 'right': ['RETORNO']},
        39: {'left': 'LEITURA', 'right': ['scanf', '(', 'LISTATERMOLEITURA', ')', ';']},
        40: {'left': 'LISTATERMOLEITURA', 'right': ['TERMOLEITURA']},
        41: {'left': 'LISTATERMOLEITURA', 'right': ['LISTATERMOLEITURA', ',', 'TERMOLEITURA']},
        42: {'left': 'TERMOLEITURA', 'right': ['id', 'DIMENSAO2']},
        43: {'left': 'DIMENSAO2', 'right': ['DIMENSAO2', '[', 'EXPR_ADITIVA', ']']},
        44: {'left': 'DIMENSAO2', 'right': ['ε']},
        45: {'left': 'ESCRITA', 'right': ['println', '(', 'LISTATERMOESCRITA', ')', ';']},
        46: {'left': 'LISTATERMOESCRITA', 'right': ['TERMOESCRITA']},
        47: {'left': 'LISTATERMOESCRITA', 'right': ['LISTATERMOESCRITA', ',', 'TERMOESCRITA']},
        48: {'left': 'TERMOESCRITA', 'right': ['id', 'DIMENSAO2']},
        49: {'left': 'TERMOESCRITA', 'right': ['CONSTANTE']},
        50: {'left': 'TERMOESCRITA', 'right': ['texto']},
        51: {'left': 'SELEÇÃO', 'right': ['if', '(', 'EXPRESSÃO', ')', 'BLOCO', 'SENÃO']},
        52: {'left': 'SENÃO', 'right': ['else', 'BLOCO']},
        53: {'left': 'SENÃO', 'right': ['ε']},
        54: {'left': 'ENQUANTO', 'right': ['while', '(', 'EXPRESSÃO', ')', 'BLOCO']},
        55: {'left': 'ATRIBUIÇÃO', 'right': ['id', '=', 'COMPLEMENTO', ';']},
        56: {'left': 'COMPLEMENTO', 'right': ['EXPRESSÃO']},
        57: {'left': 'COMPLEMENTO', 'right': ['FUNÇÃO']},
        58: {'left': 'FUNÇÃO', 'right': ['func', 'id', '(', 'ARGUMENTOS', ')']},
        59: {'left': 'ARGUMENTOS', 'right': ['LISTAARGUMENTOS']},
        60: {'left': 'ARGUMENTOS', 'right': ['ε']},
        61: {'left': 'LISTAARGUMENTOS', 'right': ['EXPRESSÃO']},
        62: {'left': 'LISTAARGUMENTOS', 'right': ['LISTAARGUMENTOS', ',', 'EXPRESSÃO']},
        63: {'left': 'RETORNO', 'right': ['return', 'EXPRESSÃO', ';']},
        64: {'left': 'EXPRESSÃO', 'right': ['EXPR_OU']},
        65: {'left': 'EXPR_OU', 'right': ['EXPR_E']},
        66: {'left': 'EXPR_OU', 'right': ['EXPR_OU', '||', 'EXPR_E']},
        67: {'left': 'EXPR_E', 'right': ['EXPR_RELACIONAL']},
        68: {'left': 'EXPR_E', 'right': ['EXPR_E', '&&', 'EXPR_RELACIONAL']},
        69: {'left': 'EXPR_RELACIONAL', 'right': ['EXPR_ADITIVA']},
        70: {'left': 'EXPR_RELACIONAL', 'right': ['EXPR_ADITIVA', 'opRelacional', 'EXPR_ADITIVA']},
        71: {'left': 'EXPR_ADITIVA', 'right': ['EXPR_MULTIPLICATIVA']},
        72: {'left': 'EXPR_ADITIVA', 'right': ['EXPR_ADITIVA', 'OP_ADITIVO', 'EXPR_MULTIPLICATIVA']},
        73: {'left': 'OP_ADITIVO', 'right': ['+']},
        74: {'left': 'OP_ADITIVO', 'right': ['-']},
        75: {'left': 'EXPR_MULTIPLICATIVA', 'right': ['FATOR']},
        76: {'left': 'EXPR_MULTIPLICATIVA', 'right': ['EXPR_MULTIPLICATIVA', 'OP_MULTIPLICATIVO', 'FATOR']},
        77: {'left': 'OP_MULTIPLICATIVO', 'right': ['*']},
        78: {'left': 'OP_MULTIPLICATIVO', 'right': ['/']},
        79: {'left': 'OP_MULTIPLICATIVO', 'right': ['%']},
        80: {'left': 'FATOR', 'right': ['SINAL', 'identificador', 'DIMENSAO2']},
        81: {'left': 'FATOR', 'right': ['SINAL', 'CONSTANTE']},
        82: {'left': 'FATOR', 'right': ['texto']},
        83: {'left': 'FATOR', 'right': ['!', 'FATOR']},
        84: {'left': 'FATOR', 'right': ['(', 'EXPRESSÃO', ')']},
        85: {'left': 'CONSTANTE', 'right': ['num_int']},
        86: {'left': 'CONSTANTE', 'right': ['num_dec']},
        87: {'left': 'SINAL', 'right': ['+']},
        88: {'left': 'SINAL', 'right': ['-']},
        89: {'left': 'SINAL', 'right': ['ε']}
        }

"""
Exemplo 


A -> BC
B -> a|b|(vazio)
C -> c

obs: cada | apresenta um para o first

firstA = firstB (união) firstC = a,b,c,(vazio)
followA = firstC = c


Exemplo de derivação:

Gramatica:
S -> AG (1)
A -> aDF (2)
F -> f (3) |fR (5) |(vazio) (6)
G -> g (7)

Derivação:
S -> (iniciou derivação)
AG -> (Aplicou regra 1)
aDFG -> (aplicou regra 2)
aD G -> (aplicou a regra 6)

onde follow de D é igua follow de A

Construtor função:

sendo isto F = função, T = Tipo, I = indentificador, .. = Qlq código dentro
F -> T I ( T ) { .. }

"""