
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EQUALS ID INT INTEGER LPAREN MINUS PLUS RPAREN SEMICOLON TIMESprogram : INT declarations statementsdeclarations : declarations declaration\n                    | declarationdeclaration : INT ID SEMICOLONstatements : statements statement\n                  | statementstatement : ID EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : INTEGER'
    
_lr_action_items = {'INT':([0,2,4,5,8,11,],[2,3,3,-3,-2,-4,]),'$end':([1,7,9,12,16,],[0,-1,-6,-5,-7,]),'ID':([3,4,5,7,8,9,11,12,16,],[6,10,-3,10,-2,-6,-4,-5,-7,]),'SEMICOLON':([6,14,15,21,22,23,24,],[11,16,-12,-8,-9,-10,-11,]),'EQUALS':([10,],[13,]),'INTEGER':([13,17,18,19,20,],[15,15,15,15,15,]),'PLUS':([14,15,21,22,23,24,],[17,-12,17,17,17,17,]),'MINUS':([14,15,21,22,23,24,],[18,-12,18,18,18,18,]),'TIMES':([14,15,21,22,23,24,],[19,-12,19,19,19,19,]),'DIVIDE':([14,15,21,22,23,24,],[20,-12,20,20,20,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'declaration':([2,4,],[5,8,]),'statements':([4,],[7,]),'statement':([4,7,],[9,12,]),'expression':([13,17,18,19,20,],[14,21,22,23,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> INT declarations statements','program',3,'p_program','Lexer.py',50),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','Lexer.py',54),
  ('declarations -> declaration','declarations',1,'p_declarations','Lexer.py',55),
  ('declaration -> INT ID SEMICOLON','declaration',3,'p_declaration','Lexer.py',62),
  ('statements -> statements statement','statements',2,'p_statements','Lexer.py',66),
  ('statements -> statement','statements',1,'p_statements','Lexer.py',67),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','Lexer.py',74),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Lexer.py',78),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Lexer.py',79),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Lexer.py',80),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Lexer.py',81),
  ('expression -> INTEGER','expression',1,'p_expression_integer','Lexer.py',85),
]
